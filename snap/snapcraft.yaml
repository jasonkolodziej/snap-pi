#?  MAIN REFERENCE: https://snapcraft.io/docs/snapcraft-yaml-reference
#?  <snap>/meta/snap.yaml Reference: https://snapcraft.io/docs/the-snap-format#heading--autostart
#? The suggested snap name, constrained to the [a-z0-9] charset and inner
#? dashes. The final name when the snap is installed is defined by the
#? snap-declaration assertion associated with the snap, if any.
name: template-snap

#? An optional title for the snap, may contain uppercase letters and spaces.
title: A Snap Template

#? Version of the software packed inside the snap. Has no semantic value
#? in the system (no greater/lower-than rules are ever applied to it).
version: "2"

#? More details about what is contained in the snap.
summary: A brief description of the snap
description: |
  <text>

#? License for the snap content, based on SPDX license expressions.
license: <expression>

#? Type of snap, defaults to "app". The `core` type has been deprecated.
type: app

#? List of architectures the snap may run on. Defaults to [all].
#? architectures:
#?     - all | amd64 | i386 | armhf | ...

#? The base snap that defines the underlying filesystem this snap
#? will be assembled on top of.
base: <name>

#? A list of features that must be supported by the core for
#? the snap to install. For example, the following sets a requirement for
#? snapd2.38 or later:
#? assumes:
#? - snapd2.38
assumes:
  - <feature>

#? The epoch this release is intended for. For further details, see:
#? https://forum.snapcraft.io/t/snap-epochs/10316
#? (snapd 2.38+)
epoch: <value>
#? Additional usernames the snap may use. Currently, the only supported
#? values for <name> is '_daemon_' (snapd 2.61+), and the now deprecated
#? 'snap-daemon'. For further details, see:
#? https://forum.snapcraft.io/t/system-usernames/13386

#? system-usernames:
#?   <name>: shared

#?  Alternative form:
#? system-usernames:
#?   <name>:
#?     scope: shared

environment:
  #? The environment directive allows you to set environment variables
  #? for the entire snap.
  <key>: <value>
  <key>: <value>

plugs:
  #? The plugs directive allows you to specify the interfaces the snap
  #? requires to run.
  - <plug>

slots:
  #? The slots directive allows you to specify the interfaces the snap
  #? provides to other snaps.
  - <slot>
  - <slot>

parts:
  <part-name>:
    #? The plugin to use to build the part. The plugin is responsible for
    #? downloading, configuring, building, and installing the part.
    plugin: <plugin>

    #? The source for the part. This can be a URL, a local directory, or a
    #? tarball. The source is used by the plugin to build the part.
    source: <source>

    #? The build-packages to install before building the part.
    build-packages:
      - <package>
      - <package>

    #? The stage-packages to include in the snap.
    stage-packages:
      - <package>
      - <package>

    #? The organize directive allows you to move files around in the snap.
    organize:
      <source>: <destination>
      <source>: <destination>

    #? The build-environment to set environment variables for the build.
    build-environment:
      <key>: <value>
      <key>: <value>

    #? The build-snaps to include in the snap.
    build-snaps:
      - <snap>
      - <snap>

    #? The after directive allows you to specify the order in which parts
    #? are built.
    after:
      - <part-name>
      - <part-name>

    #? The override-build directive allows you to override the build step
    #? of the plugin.
    override-build: |
      <commands>

    #? The override-pull directive allows you to override the pull step
    #? of the plugin.
    override-pull: |
      <commands>

    #? The override-stage directive allows you to override the stage step
    #? of the plugin.
    override-stage: |
      <commands>

    #? The override-prime directive allows you to override the prime step
    #? of the plugin.
    override-prime: |
      <commands>

apps:
  <app-name>:
    #?  The command to run when the snap is executed.
    command: <command>

    #?  The daemon directive allows you to specify that the app is a daemon.
    daemon: simple

    #?  The plugs directive allows you to specify the interfaces the app
    #?  requires to run.
    plugs:
      - <plug>
      - <plug>

    #? The environment directive allows you to set environment variables
    #? for the app.
    environment:
      <key>: <value>
      <key>: <value>

    #? The restart-condition directive allows you to specify the conditions
    #? under which the app should be restarted.
    restart-condition: <condition>

    #? The stop-command directive allows you to specify the command to run
    #? when the app is stopped.
    stop-command: <command>

    #? The stop-timeout directive allows you to specify the time to wait
    #? for the app to stop before killing it.
    stop-timeout: <timeout>

    #? The working-directory directive allows you to specify the working
    #? directory for the app.
    working-directory: <directory>

    #? The autostart directive allows you to specify that the app should
    #? be started automatically when the system boots.
    autostart: <condition>

    #? The common-id directive allows you to specify a common ID for the app.
    common-id: <id>

    #? The desktop directive allows you to specify that the app is a desktop
    #? application.
    desktop: <condition>

    #? The desktop-file directive allows you to specify the path to the
    #? desktop file for the app.
    desktop-file: <path>

    #? The extensions directive allows you to specify the extensions the app
    #? supports.
    extensions:
      - <extension>
      - <extension>

    #? The passthrough directive allows you to specify that the app should
    #? pass through the command line arguments.
    passthrough: <condition>

    #? The plugs directive allows you to specify the interfaces the app
    #? requires to run.
    #?  Reference: https://snapcraft.io/docs/supported-interfaces
    plugs:
      - <plug>
      - <plug>

    #? The slots directive allows you to specify the interfaces the app
    #? provides to other snaps.
    slots:
      - <slot>
      - <slot>
    
  
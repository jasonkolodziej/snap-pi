# Global Metadata
# The name must be unique in the Snap Store. Valid snap names consist of lower-case alphanumeric characters and hyphens. They cannot be all numbers and they also cannot start or end with a hyphen.
name: sharestream
version: "0.74-svn"
# The summary can not exceed 79 characters. You can use a chevron ‘>’ in the description key to declare a multi-line description.
summary: DOS emulator
description: |
  DOSBox is a x86 emulator with Tandy/Hercules/
  CGA/EGA/VGA/SVGA graphics sound and DOS. It's
  been designed to run old DOS games under
  platforms that don't support it.
# icon: <icon path?>
# license: <license-type?>

## The base keyword defines a special kind of snap that provides a run-time environment with a minimal set of libraries that are common to most applications. 
## They’re transparent to users, but they need to be considered, and specified, when building a snap.
base: core20

## builds a snap to run on the same architecture as the build environment.
## ref: https://snapcraft.io/docs/architectures
architecturres:
  - build-on: arm64
#    build-for: 
#  - build-on: armhf
#    run-on:  
  
# Security Model

## Because devmode is only intended for development, 
## snaps must be set to strict confinement before they can be published as “stable” in the Snap Store. 
## Once an app is working well in devmode, you can review confinement violations, add appropriate interfaces, and switch to strict confinement.
confinement: devmode
## Defines the quality grade of the snap.
## Can be either devel (i.e. a development version of the snap, 
## so not to be published to the stable or candidate channels) or 
## stable (i.e. a stable release or release candidate, which can be released to all channels).
## A snap of type app (default) cannot be set to stable if the base is not on a stable channel.
# grade: stable | devel

# Parts
## are the raw building blocks of a snap, used to collect and build binaries and their dependencies.
## Parts define what sources are needed to assemble your app. 
## Parts can be anything: programs, libraries, or other needed assets.
parts:
  ## The parts arbitrary name
  spotifyd:
  ## The plugin field=(dump) determines how the information in specified in the source field and includes the source's contents in the snap. The source can be a local or remote zip file, deb file, or tarball.
    plugin: rust
    ## (list of strings) Features used to build optional dependencies
    rust-features:
      - pulseaudio_backend
      - dbus_keyring
      - dbus_mpris
    source-type: git
    source: https://github.com/Spotifyd/spotifyd.git
    ## Before building the part, the packages listed in the build-packages section need to be installed in the build environment. These are the tools and libraries that are used during the build process.
    build-packages:
      - build-essential
      - libasound2-dev
      - pkg-config
      - libpulse-dev
      - libssl-dev
      - libdbus-1-dev
    ##  These are packages containing libraries are resources that DOSBox needs to run. They are very similar to those that would be listed as run-time dependencies on a standard distribution package.
    # stage-packages:
    #   - staged-pkg1
    ## You can override and customise steps of a part’s lifecycle (pull, build, stage, and prime) using overrides;
    ## ref: https://snapcraft.io/docs/overrides
    # override-<step name>: |
    #   <multi-line>
    #   <shell script>
  
  # shairplay-sync:
  # ## The plugin field=(dump) determines how the information in specified in the source field and includes the source's contents in the snap. The source can be a local or remote zip file, deb file, or tarball.
  #   plugin: <type>
  #   source-type: tar
  #   source: <source>
  #   ## Before building the part, the packages listed in the build-packages section need to be installed in the build environment. These are the tools and libraries that are used during the build process.
  #   build-packages:
  #     - pkg1
  #   ##  These are packages containing libraries are resources that DOSBox needs to run. They are very similar to those that would be listed as run-time dependencies on a standard distribution package.
  #   stage-packages:
  #     - staged-pkg1
  #   ## You can override and customise steps of a part’s lifecycle (pull, build, stage, and prime) using overrides;
  #   ## ref: https://snapcraft.io/docs/overrides
  #   # override-<step name>: |
  #   #   <multi-line>
  #   #   <shell script>

## ref: https://snapcraft.io/docs/snapcraft-app-and-service-metadata
apps:
  ## ref: https://snapcraft.io/docs/services-and-daemons
  # some-daemon:
  #   command: bin/os-release.sh
  #   daemon: simple
  spotifyd:
    # adapter: full
    # WORKAROUND: Snapcraft impose too much restrictions to the command format
    # https://bugs.launchpad.net/snapcraft/+bug/1820055
    command: bin/spotifyd
    daemon: simple
    environment:
      # Fix ALSA
      ALSA_CONFIG_PATH: /snap/$SNAPCRAFT_PROJECT_NAME/current/usr/share/alsa/alsa.conf
    plugs:
      ## Audio access
      audio-playback:
      alsa:
      pulseaudio:
    
      # Canonical config path access
      # https://forum.snapcraft.io/t/the-personal-files-interface/9357
      # FIXME: Waiting for autoconnection grant on the store
      # https://forum.snapcraft.io/t/interface-auto-connect-request-for-the-guvcview-snap-personal-files/10858
      #user-guvcview-config:
        #interface: personal-files
        #write:
        #- $HOME/.config/guvcview2
    
      # Recommendations from snappy-debug
      screen-inhibit-control:
